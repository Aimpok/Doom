server.jsconst express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.io
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

app.use(cors());
app.use(express.json());

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
app.use(express.static(path.join(__dirname, '../public')));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç
const rooms = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
function getRandomPosition() {
  return {
    x: Math.random() * 100 - 50,
    z: Math.random() * 100 - 50
  };
}

io.on('connection', (socket) => {
  console.log('‚úÖ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('joinRoom', (data) => {
    const { roomCode, playerId, playerName } = data;
    
    console.log(`üéÆ –ò–≥—Ä–æ–∫ ${playerName} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!rooms.has(roomCode)) {
      rooms.set(roomCode, {
        players: new Map(),
        enemies: [],
        createdAt: Date.now()
      });
      console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomCode}`);
    }
    
    const room = rooms.get(roomCode);
    const startPos = getRandomPosition();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    room.players.set(playerId, {
      id: playerId,
      name: playerName,
      x: startPos.x,
      z: startPos.z,
      hp: 100,
      socketId: socket.id,
      lastUpdate: Date.now()
    });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.join(roomCode);
    
    // –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
    socket.to(roomCode).emit('playerJoined', {
      playerId,
      playerName,
      x: startPos.x,
      z: startPos.z,
      hp: 100
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    const playersInRoom = Array.from(room.players.values())
      .filter(p => p.id !== playerId)
      .map(p => ({
        playerId: p.id,
        playerName: p.name,
        x: p.x,
        z: p.z,
        hp: p.hp
      }));
    
    socket.emit('roomState', playersInRoom);
    
    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}. –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: ${room.players.size}`);
  });

  // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  socket.on('playerMove', (data) => {
    const { roomCode, playerId, x, z, yaw, pitch } = data;
    
    if (rooms.has(roomCode)) {
      const room = rooms.get(roomCode);
      if (room.players.has(playerId)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        const player = room.players.get(playerId);
        player.x = x;
        player.z = z;
        player.yaw = yaw;
        player.pitch = pitch;
        player.lastUpdate = Date.now();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
        socket.to(roomCode).emit('playerMoved', {
          playerId,
          x,
          z,
          yaw,
          pitch
        });
      }
    }
  });

  // –í—ã—Å—Ç—Ä–µ–ª –∏–≥—Ä–æ–∫–∞
  socket.on('playerShoot', (data) => {
    const { roomCode, playerId } = data;
    socket.to(roomCode).emit('playerShoot', { playerId });
    console.log(`üî´ –ò–≥—Ä–æ–∫ ${playerId} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º
  socket.on('playerDamage', (data) => {
    const { roomCode, playerId, damage, hp } = data;
    
    if (rooms.has(roomCode)) {
      const room = rooms.get(roomCode);
      if (room.players.has(playerId)) {
        room.players.get(playerId).hp = hp;
        socket.to(roomCode).emit('playerDamage', { playerId, hp });
        console.log(`üí• –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω. HP: ${hp}`);
      }
    }
  });

  // –°–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
  socket.on('playerDeath', (data) => {
    const { roomCode, playerId } = data;
    socket.to(roomCode).emit('playerDeath', { playerId });
    console.log(`üíÄ –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–≥–∏–± –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
  });

  // –£–±–∏–π—Å—Ç–≤–æ –≤—Ä–∞–≥–∞
  socket.on('enemyKilled', (data) => {
    const { roomCode, enemyId } = data;
    socket.to(roomCode).emit('enemyKilled', { enemyId });
    console.log(`üëæ –í—Ä–∞–≥ —É–±–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  socket.on('disconnect', () => {
    console.log('‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    for (const [roomCode, room] of rooms.entries()) {
      for (const [playerId, player] of room.players.entries()) {
        if (player.socketId === socket.id) {
          room.players.delete(playerId);
          socket.to(roomCode).emit('playerLeft', { playerId });
          console.log(`üö™ –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomCode}`);
          
          // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è
          if (room.players.size === 0) {
            rooms.delete(roomCode);
            console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomCode} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`);
          }
          break;
        }
      }
    }
  });

  // –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('ping', (data) => {
    socket.emit('pong', { ...data, serverTime: Date.now() });
  });
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  const inactiveTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  
  for (const [roomCode, room] of rooms.entries()) {
    let allInactive = true;
    
    for (const player of room.players.values()) {
      if (now - player.lastUpdate < inactiveTime) {
        allInactive = false;
        break;
      }
    }
    
    if (allInactive && (now - room.createdAt > inactiveTime)) {
      rooms.delete(roomCode);
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomCode}`);
    }
  }
}, 5 * 60 * 1000);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    rooms: rooms.size,
    totalPlayers: Array.from(rooms.values()).reduce((sum, room) => sum + room.players.size, 0)
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Doom Maze Server</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #1a1a1a; color: #fff; }
            .container { max-width: 800px; margin: 0 auto; }
            .status { background: #2a2a2a; padding: 20px; border-radius: 10px; margin: 20px 0; }
            .room { background: #333; padding: 15px; margin: 10px 0; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÆ Doom Maze Multiplayer Server</h1>
            <div class="status">
                <h2>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <span style="color: #4CAF50;">üü¢ –†–∞–±–æ—Ç–∞–µ—Ç</span></h2>
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: <strong>${rooms.size}</strong></p>
                <p>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: <strong>${Array.from(rooms.values()).reduce((sum, room) => sum + room.players.size, 0)}</strong></p>
            </div>
            <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:</h2>
            ${Array.from(rooms.entries()).map(([code, room]) => `
                <div class="room">
                    <h3>–ö–æ–º–Ω–∞—Ç–∞: ${code}</h3>
                    <p>–ò–≥—Ä–æ–∫–æ–≤: ${room.players.size}</p>
                    <p>–°–æ–∑–¥–∞–Ω–∞: ${new Date(room.createdAt).toLocaleTimeString()}</p>
                </div>
            `).join('') || '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</p>'}
        </div>
    </body>
    </html>
  `);
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
});
